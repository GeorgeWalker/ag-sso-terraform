name: Client Installtion Json

on:
  workflow_dispatch:
    inputs:
      client-id:
        description: 'Client ID'
        required: true
      env:
        description: 'Environment'
        required: true
      realm:
        description: 'Realm'
        required: true
      email:
        description: 'your government email address'
        required: true

jobs:
  installtion-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Display Inputs
        if: github.actor  == 'sookeke' || github.actor == 'lee.wright' 
        run: |
          echo "Client ID: ${{ github.event.inputs.client-id }}"
          echo "Environment: ${{ github.event.inputs.env }}"
          echo "Realm: ${{ github.event.inputs.realm }}"
      - name: Check Email Domain
        if: github.actor == 'sookeke' || github.actor == 'lee.wright'
        id: email
        run: |
          if [[ "${{ github.event.inputs.email }}" != *'gov.bc.ca' ]]; then
            echo "Invalid email domain. Failing the workflow."
            exit 1
          fi
          first_name=$(echo "$email" | cut -d'.' -f1)
          echo "::set-output name=first_name::$first_name"
      - name: Get Client Installation JSON
        id: client_installation
        if: github.actor  == 'sookeke' || github.actor == 'lee.wright' 
        run: |
          client_id=${{ github.event.inputs.client-id }}
          env=${{ github.event.inputs.env }}
          realm=${{ github.event.inputs.realm }}
          ./get_client_installation_json.sh ${{ github.event.inputs.client-id }} ${{ github.event.inputs.env }} ${{ github.event.inputs.realm }} ${{secrets.TF_VAR_DEV_CLIENT_SECRET}}> output_file.txt
          if grep -q "Invalid http_code" output_file.txt; then
            echo "Invalid http_code in the output. Failing the workflow."
            cat output_file.txt
            exit 1
          fi
      - name: Encode Installation Json
        if: steps.client_installation.outcome == 'success'
        id: encode
        run: |
            encoded_contents=$(base64 < output_file.txt)
            echo "::set-output name=encoded_contents::$encoded_contents"
      - name: Get Email Access Token 
        if: steps.client_installation.outcome == 'success' && steps.encode.outcome == 'success'
        id: token
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://dev.loginproxy.gov.bc.ca/auth/realms/comsvcauth/protocol/openid-connect/token'
          method: 'POST'
          username: ${{ secrets.CHES_DEV_CLIENT_ID}}
          password: ${{ secrets.CHES_DEV_CLIENT_SECRET }}
          customHeaders: '{"Content-Type": "application/x-www-form-urlencoded"}'
          data: '{"grant_type": "client_credentials"}'
      - name: Send Email 
        if: steps.token.outcome == 'success' && steps.encode.outcome == 'success'
        id: email
        uses: fjogeleit/http-request-action@v1
        with:
            url: 'https://ches-dev.api.gov.bc.ca/api/v1/email'
            method: 'POST'
            bearerToken: ${{ fromJson(steps.token.outputs.response).access_token }}
            customHeaders: '{"Content-Type": "application/json"}'
            data: '{
                  "bodyType": "html",
                  "body": "<p>Dear ${{ steps.email.outcome.first_name }},</p>
                  <p>Thank you for choosing DIAM. Attached is your DIAM client installation JSON, providing you with the latest and most secure features.</p>
                  <p>Please don''t hesitate to reach out if you have any questions or need further assistance.</p>
                  <p>Best regards,<br>Your DIAM Support Team</p>",  
                  "delayTS": 0,
                  "encoding": "utf-8",
                  "from": "jpsprovideridentityportal@gov.bc.ca",
                  "priority": "normal",
                  "subject": "DIAM Client Installation Json",
                  "to": ["${{ github.event.inputs.email }}"],
                  "attachments": [
                    {
                      "content": "${{ steps.encode.outputs.encoded_contents }}",
                      "contentType": "text/markdown",
                      "encoding": "base64",
                      "filename": "client-installation.json"
                    }
                  ]
                }
              '

      
          

